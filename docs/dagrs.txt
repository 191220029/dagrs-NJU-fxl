发明名称：一种基于流编程范式的Rust异步任务调度框架
申请类型：1发明    0实用新型
申请人：南京大学
申请人地址：江苏省南京市栖霞区仙林大道163号
邮编：210023
统一社会信用代码：12100000466007458M
发明人名单：
发明人名单中第一发明人身份证号码：
联系人：
提前公布：1请求早日公布该专利申请，1进入实质审查
代理师：李玉平 15252466729，lyping_08@163.com
代理机构：南京乐羽知行专利代理事务所（普通合伙）
 
本发明公开一种基于流编程的异步任务编程框架的实现方法，该框架通过以下核心机制实现异步任务编排：黑盒任务封装：将异步任务抽象为独立进程单元，支持通过信息包进行数据交互，实现任务逻辑与通信逻辑的解耦；动态网络构建：允许开发者通过外部配置文件或编程接口定义任务间拓扑关系，支持运行时动态调整连接路径与通信容量；异步执行引擎：基于Rust语言与Tokio异步运行时，实现任务级并发调度，结合所有权机制确保数据生命周期安全；反向压力控制：通过有限容量通道与优先级队列，自动触发流量控制策略以避免系统过载。本框架通过模块化设计降低异步编程复杂度，支持开发者在无需手动管理和调度线程、协程的情景下构建高性能的异步应用。
 

指定图1为摘要附图


 

1. 一种基于流的编程范式的Rust异步任务框架的实现方法，其特征在于，黑盒任务封装：将异步任务抽象为独立进程单元，各进程单元通过框架定义的信息包进行数据交互，实现任务逻辑与通信逻辑的解耦；动态网络构建：允许开发者通过外部配置文件或框架提供的接口定义任务间拓扑关系，支持运行时动态调整连接路径与通信容量；异步执行引擎：基于Rust语言与Tokio异步运行时，实现任务级并发调度，结合所有权机制确保数据生命周期安全；反向压力控制：通过有限容量通道与优先级队列，自动触发流量控制策略以避免系统过载。本框架通过模块化设计降低异步编程复杂度，支持开发者在无需手动管理和调度线程、协程的情景下构建高性能的异步应用。
2. 根据权利要求1所述的基于流的编程范式的Rust异步任务框架的实现方法，其特征在于，将应用程序或拆分的程序功能项抽象为由多个黑盒进程组成的任务网络，各进程通过框架提供的连接进行通信，所述连接在框架构建任务流图时自动实现。
3. 根据权利要求1所述的基于流的编程范式的Rust异步任务框架的实现方法，其特征在于，基于Rust程序设计语言的tokio运行时实现非阻塞的异步任务调度操作，并支持用户在工作节点内自定义功能所需的异步操作，从而实现高性能和高灵活度的目标。
4. 根据权利要求1所述的基于流的编程范式的Rust异步任务框架的实现方法，其特征在于，利用Rust程序设计语言的特性，为每个信息包分配唯一所有权及生命周期，确保信息包的内存安全性。
5. 根据权利要求1和要求2所述的基于流的编程范式的Rust异步任务框架的实现方法，其特征在于，利用Rust程序设计语言提供的Any特型实现动态类型擦除，从而在强类型程序设计语言下允许用户在工作节点间发送不同类型的数据，达到高灵活性的设计目标。
6. 根据权利要求1和要求3所述的基于流的编程范式的Rust异步任务框架的实现方法，任务节点间的连接基于Rust程序设计语言的tokio代码库提供的管道结构，采用反向压力机制控制通信拥塞，当连接通道容量达到预设阈值时暂停数据发送或丢弃过时数据。
7. 根据权利要求1所述的基于流的编程范式的Rust异步任务框架的实现方法，其特征在于，支持收集各任务输出结果，在任务流图执行完毕后，允许用户查询任务节点输出结果。
9. 根据权利要求1、权利要求3和权利要求6所述的基于流的编程范式的Rust异步任务框架的实现方法，其特征在于，利用Rust程序设计语言的过程宏实现用户自定义任务节点及其相关接口的自动化代码生成，减少手动编码冗余。
10. 根据权利要求1所述的基于流的编程范式的Rust异步任务框架的实现方法，其特征在于，支持工作节点的条件执行和循环子图执行。
10. 根据权利要求1和要求10所述的基于流的编程范式的Rust异步任务框架的实现方法，其特征在于，通过基于条件执行节点的执行块划分确定最大并行粒度，并利用工作节点的块结构排除非循环子图构成的循环结构。
 
 
 
一种基于流编程范式的Rust异步任务调度框架
技术领域
本发明属于软件开发技术领域，具体涉及一种基于流的编程范式的异步任务框架的实现方法，适用于构建高性能、高可靠性的分布式异步任务处理系统。该框架通过模块化设计、工作任务的黑盒抽象、异步通信机制及反向压力控制策略，优化任务编排效率，降低开发复杂度，可广泛应用于云计算、实时数据处理及微服务架构场景。
背景技术
基于流的编程范式的雏形由加拿大的 J. Paul Morrison提出。他在IBM工作期间萌生了这个革命性的想法，这个灵感最终在加拿大银行的系统中首次落地，创造了连续运行近半个世纪的软件传奇。2004年ACM的有关研究证明，基于流的编程范式可以缩短软件的开发周期。
Morrison提出的FBP有效地重建了早期程序控制方法，让数据以流的形式路由到专用应用程序，从而允许程序员编写执行特定功能的函数，然后使用网络去定义函数间的关系，从而并发地执行这些函数、以及在这些函数之间传递数据。
基于流的编程范式比其他传统的编程范式还有所改进的地方在于，它允许开发人员构建能够集成到任何应用程序中的可以重复使用的组件，并且给可视化构建应用程序创造条件。这让新开发的应用程序也非常易于维护，其中一些应用程序在 40 年后仍在使用。 
对于传统的开发模式而言，随着程序的功能变得越来越多，代码量不断增长，这些程序会变得越来越难被理解和维护。这个问题的通常解决方案是将更多的开发人员投入到项目中，并使用谨慎的部署策略（如持续集成）来降低风险。
事实上，让非开发人员能够参与构建过程，而不仅仅是让他们向程序员提出需求，也可能是上述问题的解决方案之一。
异步任务编排是提升系统吞吐量与响应速度的关键技术。现有的异步任务编排框架仍然需要面对如下挑战：
（1）异步编程复杂性：开发者需手动管理线程、锁及回调，易引发死锁、竞态条件等问题。如何利用统一的框架接口省去开发者开发成本十分重要。
（2）通信效率和灵活度：传统消息队列缺乏反向压力控制，易因生产者-消费者速率不匹配导致内存溢出或数据丢失。消息包的内存安全机制也需要得到保障。
（3）模块化设计：需要降低任务组件耦合度，支持动态扩展或替换。
为此，本发明提出一种基于流的编程范式的异步任务框架，通过黑盒进程抽象、所有权驱动的信息包管理、支持背压机制和动态类型传输的消息管道、异步任务调度和执行，解决上述问题。
发明内容
发明目的：针对现有技术中存在的问题与挑战，本发明提供一种基于流的编程范式的异步任务框架的实现方法，提供一种高可用、易扩展的异步任务框架。
技术方案：基于流编程的异步任务编程框架的实现方法，该框架通过以下核心机制实现异步任务编排：黑盒任务封装：将异步任务抽象为独立进程单元，支持通过信息包进行数据交互，实现任务逻辑与通信逻辑的解耦；动态网络构建：允许开发者通过外部配置文件或编程接口定义任务间拓扑关系，支持运行时动态调整连接路径与通信容量；异步执行引擎：基于Rust语言与Tokio异步运行时，实现任务级并发调度，结合所有权机制确保数据生命周期安全；反向压力控制：通过有限容量通道与优先级队列，自动触发流量控制策略以避免系统过载。具体而言，该方法包括以下步骤： 
首先，框架通过Node特型定义了任务节点的基本接口，每个节点具有唯一的NodeId标识符和用户定义的任务名称。节点可以自定义执行逻辑，通过实现支持异步执行的run方法定义具体的任务行为。节点之间通过框架封装的InChannels和OutChannels进行异步通信，支持点对点和广播两种通信模式。框架还支持两种特殊的节点：
（1）	条件节点：
（2）	循环子图： 
其次，框架设计了Graph结构体作为任务调度和执行的核心组件，负责管理整个任务网络的执行。它负责维护节点集合、执行状态、环境变量等关键信息，并通过抽象图结构进行循环检测。Graph提供了add_node和add_edge方法用于构建任务网络。在执行过程中，Graph将任务网络划分为多个执行块，每个块内的节点可以并发执行，块之间保持顺序执行，确保任务依赖关系的正确性。
第三，框架通过Content结构体实现了类型安全的数据传输机制。Content使用Rust的Any trait实现动态类型擦除，允许节点间传输任意类型的数据，同时通过Arc智能指针确保数据的所有权安全。这种设计既保证了类型安全，又提供了足够的灵活性，使得节点可以接受和发送各种类型的数据。
第四，框架基于tokio的异步执行引擎，支持任务级并发调度。每个节点在独立的tokio任务中执行，通过tokio的通道进行通信。框架借助tokio通道实现反向压力控制机制，当通道容量达到预设阈值时，自动触发流量控制策略。此外，框架提供了错误处理和恢复机制，当节点执行失败时，可以捕获错误并继续执行其他节点。
最后，框架支持环境变量和全局状态管理，通过EnvVar结构体存储和共享全局配置信息。NodeTable用于管理节点标识符的分配和查找，确保节点标识符的唯一性。框架还提供了结果收集和查询机制，允许用户在执行完成后获取各个节点的输出结果。
该框架通过模块化设计和类型安全机制，显著降低了异步编程的复杂度，使开发者能够专注于业务逻辑的实现，而无需手动管理线程、锁和回调，并让图形化设计和编写异步程序成为一种可能。同时，框架的灵活性和可扩展性使其能够适应各种复杂的异步任务处理场景，如云计算、实时数据处理和微服务架构等。
